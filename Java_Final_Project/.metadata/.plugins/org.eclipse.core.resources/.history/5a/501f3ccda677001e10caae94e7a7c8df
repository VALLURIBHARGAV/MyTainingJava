package com.system.billing.services;


import com.system.billing.models.Bill;
import com.system.billing.models.Patient;
import com.system.billing.repositories.BillRepository;
import com.system.billing.repositories.PatientRepository;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Service;

import java.util.List;
import java.util.Optional;

@Service
public class BillService {
	
	@Autowired
    BillRepository billRepository;
	@Autowired
	PatientRepository  patientRepository;
	
    
    public BillService(BillRepository billRepository) {
        this.billRepository = billRepository;
    }

    public List<Bill> getAllBills() {
        return billRepository.findAll();
    }

    public Optional<Bill> getBillById(int billId) {
        return billRepository.findById(billId);
    }

    public Bill createBill(Bill bill) {
        return billRepository.save(bill);
    }

    public Bill updateBill(Bill bill) {
        return billRepository.save(bill);
    }

    public void deleteBill(int billId) {
        billRepository.deleteById(billId);
    }
    
//    public Bill generateBillForPatient(Patient patient, Double bedCharges, Double wardCharges, Double treatmentCharges) {
//        // Calculate total charges here
//        double totalAmount = bedCharges + wardCharges + treatmentCharges;
//        double defaultBedCharges = 200;
//        double defaultWardCharges = 150;
//        double defaultTreatmentCharges = 500;
//
//        // Use the provided values if available; otherwise, use defaults
//        double actualBedCharges = bedCharges != null ? bedCharges : defaultBedCharges;
//        double actualWardCharges = wardCharges != null ? wardCharges : defaultWardCharges;
//        double actualTreatmentCharges = treatmentCharges != null ? treatmentCharges : defaultTreatmentCharges;
//
//        // Create a new bill
//        Bill bill = new Bill();
//        bill.setPatient(patient);
//        bill.setBedCharges(actualBedCharges);
//        bill.setWardCharges(actualWardCharges);
//        bill.setTreatmentCharges(actualTreatmentCharges);
//        bill.setAmount(totalAmount);
//        
//        
//
//        // You can save the bill to the database using BillRepository.save() if needed
//
//        return bill;
//    	
//    	
//    }
    
    public Bill generateBillForPatient( Double bedCharges, Double wardCharges, Double treatmentCharges,int patid) {
        // Check for null values and handle them
    	 Optional<Patient> optionalPatient = patientRepository.findById(patid);
    	 if (optionalPatient.isPresent()) {
             Patient patient = optionalPatient.get();{
            	 double totalAmount = 0.0;

                 if (bedCharges != null) {
                     totalAmount += bedCharges;
                 }

                 if (wardCharges != null) {
                     totalAmount += wardCharges;
                 }

                 if (treatmentCharges != null) {
                     totalAmount += treatmentCharges;
                 }

                 // Create a new bill
                 Bill bill = new Bill();
                 bill.setPatient(patient);

                 // Set the charges (null values are handled gracefully)
                 bill.setBedCharges(bedCharges != null ? bedCharges : 0.0);
                 bill.setWardCharges(wardCharges != null ? wardCharges : 0.0);
                 bill.setTreatmentCharges(treatmentCharges != null ? treatmentCharges : 0.0);
                 bill.setAmount(totalAmount);

                 // Save the bill to the database using the repository
                 billRepository.save(bill);

                 return bill;
             }
        
    }


    // You can add additional service methods as needed for your application's business logic

